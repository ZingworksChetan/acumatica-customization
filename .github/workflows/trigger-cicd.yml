name: Trigger CI/CD Pipeline

on:
  push:
    paths:
      - 'Customization/**'

jobs:
  trigger_cicd:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository with Full History
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect latest customization folder (with fallback & fix)
        id: detect_folder
        shell: pwsh
        run: |
    
          cd $env:GITHUB_WORKSPACE

          $diffRaw = git diff --name-only ${{ github.event.before }} ${{ github.event.after }}
          if (-not $diffRaw) {
           Write-Host "⚠️ git diff is empty, using fallback to get latest commit files"
           $diffRaw = git show --name-only --pretty="" HEAD
          }

          # Normalize lines
          $diffFiles = $diffRaw -split "`r`n|`n|`r" | ForEach-Object { $_.Trim() }

           $folderPattern = [regex]'^Customization/([^/]+)/'
           $folders = @()

          foreach ($line in $diffFiles) {
            $line = $line.Trim()
            if ($folderPattern.IsMatch($line)) {
              $folder = $folderPattern.Match($line).Groups[1].Value
              if (-not $folders.Contains($folder)) {
                $folders += $folder
              }
            }
          }

          Write-Host "📂 Extracted folders: $($folders -join ', ')"

          foreach ($folder in $folders) {
            $fullPath = Join-Path -Path "Customization" -ChildPath $folder
            if (Test-Path -LiteralPath $fullPath) {
              Write-Host "Found valid customization folder: $folder"
              echo "VERSION_NAME=$folder" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
              exit 0
            } else {
              Write-Host "Folder $fullPath does not exist"
            }
          }
          Write-Host "⚠️ No valid customization folder found (all may be deleted)"
          echo "VERSION_NAME=" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Debug Extracted Folders
        shell: pwsh
        run: |
          echo "Extracted folders: ${{ env.VERSION_NAME }}"

      - name: Trigger CI/CD in `acumatica-cicd-pipeline`
        if: env.VERSION_NAME != ''
        shell: pwsh
        run: |
          $headers = @{
            "Authorization" = "token ${{ secrets.CICDTOKEN }}"
            "Accept" = "application/vnd.github.v3+json"
          }
          $body = @{
              ref = "main"
              inputs = @{ versionName = "${{ env.VERSION_NAME }}" }
          } | ConvertTo-Json -Compress

          Invoke-RestMethod -Uri "https://api.github.com/repos/ZingworksChetan/acumatica-cicd-pipeline/actions/workflows/main.yml/dispatches" `
                            -Method Post `
                            -Headers $headers `
                            -Body $body `
                            -ContentType "application/json"
